{"version":3,"sources":["services/auth.js","components/Header/index.js","components/Footer/index.js","services/api.js","utils/constants.js","components/Signin/index.js","components/Loader/index.js","components/Login/index.js","components/Sidebar/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["TOKEN_KEY","login","token","localStorage","setItem","Header","id","Footer","className","apiEndpoint","sexismConcept","api","axios","create","baseURL","interceptors","request","use","a","config","getItem","headers","Authorization","SignIn","state","email","password","error","handleSignIn","e","preventDefault","setState","post","response","data","props","history","push","this","_isMounted","window","scrollTo","onSubmit","type","placeholder","onChange","target","value","Component","withRouter","Loader","Signin","PrivateRoute","component","rest","render","console","log","to","pathname","from","location","App","basename","path","Home","Login","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.892e5423.chunk.js","sourcesContent":["export const TOKEN_KEY = \"@airbnb-Token\";\nexport const isAuthenticated = () => {\n  console.log('_________________________________________');\n  console.log(localStorage.getItem(TOKEN_KEY))\n  return localStorage.getItem(TOKEN_KEY) !== null;\n}\nexport const getToken = () => localStorage.getItem(TOKEN_KEY);\nexport const login = token => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\nexport const logout = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};","import React from  'react';\nimport './styles.css'\nconst Header = () => (\n  <header id='main-header'>ERP para Redes de Supermercados</header>\n);\n\nexport default Header;","import React from  'react';\nimport './styles.css'\nconst Footer = () => (\n  <footer id='main-footer'>\n    <div className='footer-text'>\n      <p>\n      Sistema de Planejamento de Recursos Empresariais para Redes de Supermercados criado na disciplina de Banco de Dados de 2019/02\n      </p>\n      <p>\n        Desenvolvedores: Caio Balbi (coob@icomp.ufam.edu.br), Luiz Alexndre (lass@icomp.ufam.edu.br), Maria Luísa (mlpb@icomp.ufam.edu.br)\n      </p>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import axios from 'axios';\nimport constants from '../utils/constants';\nimport {getToken} from './auth';\n\nconst { apiEndpoint } = constants;\n\nconst api = axios.create({\n  baseURL: apiEndpoint\n});\n\napi.interceptors.request.use(async config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport default api;","const constants = {\n  apiEndpoint: 'http://tcc-api-elb-1124838076.us-east-2.elb.amazonaws.com',\n  sexismConcept: 'Aqui, consideramos sexismo o discurso que se dirige a pessoas do gênero feminino com a intenção de ofender, diminuir, oprimir ou agredir. São exemplos de comentários sexistas as seguintes frases: \"Deveria sair da internet e ir pra cozinha.\", \"Ela só ganhou o prêmio porque é mulher.\", \"Essa vagabunda não devia falar nada.\"',\n}\nexport default constants;","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport api from '../../services/api';\nimport { login } from \"../../services/auth\";\n\nimport './styles.css';\n\nclass SignIn extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    error: \"\"\n  };\n  \n  componentDidMount() {\n    this._isMounted = true;\n    window.scrollTo(0, 0)\n  }\n\n  handleSignIn = async e => {\n    e.preventDefault();\n    const { email, password } = this.state;\n    if (!email || !password) {\n      this.setState({ error: \"Preencha e-mail e senha para continuar!\" });\n    } else {\n      try {\n        const response = await api.post(\"/auth\", { email, password });\n        login(response.data.token);\n        this.props.history.push(\"/home\");\n      } catch (err) {\n        this.setState({\n          error:\n            \"Houve um problema com o login, verifique suas credenciais. T.T\"\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className='siginin-container'>\n        <form onSubmit={this.handleSignIn}>\n          {this.state.error && <p className='error-box'>{this.state.error}</p>}\n          <div className='signin-input'>\n            <label>Email  </label>\n            <input\n              type=\"email\"\n              placeholder=\"Endereço de e-mail\"\n              onChange={e => this.setState({ email: e.target.value })}\n              />\n          </div>\n          <div className='signin-input'>\n          <label>Senha  </label>\n            <input\n              type=\"password\"\n              placeholder=\"Senha\"\n              onChange={e => this.setState({ password: e.target.value })}\n              />\n          </div>\n          <div>\n            <button type=\"submit\">Entrar</button>\n          </div>\n          {/* <Link className='link-button' to='/signup'> Cadastrar</Link> */}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(SignIn);","import React from  'react';\nimport './styles.css'\nconst Loader = () => (\n  <div className='loading'></div>\n);\n\nexport default Loader;","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport Signin from '../Signin';\nimport Loader from '../Loader';\nimport './styles.css'\n\nconst Login = () => (\n  <div className='login'>\n    <div className='about'>\n      <p>\n        Esse sistema foi desenvolvido para que redes de supermercados possam gerenciar a compra e a venda de seus produtos, entrada e saída de seus funcionários gerenciar sua rede de supermercados com tranquilidade.\n      </p>\n      <p>\n        Para entrar no sistema, cadastre insira seu login e senha no espaço abaixo, caso ainda não tenha um usuário cadastrado, entre em contato com o seu administrador.\n      </p>\n    </div>\n    <div className='options'>\n      <Signin />\n    </div>\n  </div>\n);\n\nexport default withRouter(Login);","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport Signin from '../Signin';\nimport Loader from '../Loader';\nimport './styles.css'\n\nconst Sidebar = () => (\n  <div className='sidebar'>\n    <Loader/>\n  </div>\n);\n\nexport default withRouter(Sidebar);","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport Sidebar from '../Sidebar';\n// import Loader from '../Loader';\nimport './styles.css'\n\nconst Home = () => (\n  <div className='home'>\n    <div className='about'>\n      <p>\n        Esse sistema foi desenvolvido para que redes de supermercados possam gerenciar a compra e a venda de seus produtos, entrada e saída de seus funcionários gerenciar sua rede de supermercados com tranquilidade.\n      </p>\n      <p>\n        Para entrar no sistema, cadastre insira seu login e senha no espaço abaixo, caso ainda não tenha um usuário cadastrado, entre em contato com o seu administrador.\n      </p>\n    </div>\n    <div className='options'>\n      <Sidebar />\n    </div>\n  </div>\n);\n\nexport default withRouter(Home);","import React from 'react';\nimport { HashRouter, Route, Redirect } from \"react-router-dom\";\nimport { isAuthenticated } from \"./services/auth\";\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './components/Login';\n// import Signup from './components/Signup';\nimport Home from './components/Home';\nimport './App.css';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      isAuthenticated() ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to={{ pathname: \"/home\", state: { from: props.location } }} />\n      )\n    }\n  />\n);\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <Header/>\n        {/* <Route path=\"/home\" component={Home}/> */}\n        {/* <Route exact path=\"/signup\" component={Signup}/> */}\n        <PrivateRoute path=\"/home\" component={Home} />\n        <Route path=\"/\" component={Login} />\n        <Footer/>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}